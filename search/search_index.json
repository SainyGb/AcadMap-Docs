{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DAS - Documenta\u00e7\u00e3o de Arquitetura de Sistema","text":"<p>Bem-vindo \u00e0 documenta\u00e7\u00e3o de arquitetura do sistema AcadMap!</p>"},{"location":"#o-que-e-um-das","title":"O que \u00e9 um DAS?","text":"<p>O DAR (Documento de Arquitetura de Sistema) \u00e9 um artefato fundamental no processo de desenvolvimento de sistemas. Ele descreve, de forma estruturada, as principais decis\u00f5es arquiteturais, componentes, m\u00f3dulos, intera\u00e7\u00f5es e restri\u00e7\u00f5es que orientam a constru\u00e7\u00e3o e evolu\u00e7\u00e3o do software.</p>"},{"location":"#objetivos-do-das","title":"Objetivos do DAS","text":"<ul> <li>Registrar decis\u00f5es arquiteturais tomadas durante o projeto.</li> <li>Comunicar a arquitetura para todos os stakeholders (desenvolvedores, clientes, gestores, etc).</li> <li>Facilitar a manuten\u00e7\u00e3o e evolu\u00e7\u00e3o do sistema, servindo como refer\u00eancia para futuras modifica\u00e7\u00f5es.</li> <li>Apoiar a an\u00e1lise de riscos e a identifica\u00e7\u00e3o de pontos cr\u00edticos do sistema.</li> </ul>"},{"location":"#estrutura-desta-documentacao","title":"Estrutura desta documenta\u00e7\u00e3o","text":"<p>Esta documenta\u00e7\u00e3o est\u00e1 organizada em se\u00e7\u00f5es que abordam desde a introdu\u00e7\u00e3o do sistema, identifica\u00e7\u00e3o de stakeholders, preocupa\u00e7\u00f5es, pontos de vista arquiteturais, vis\u00f5es espec\u00edficas (l\u00f3gica, desenvolvimento, implanta\u00e7\u00e3o, processo e cen\u00e1rios), at\u00e9 decis\u00f5es arquiteturais, governan\u00e7a, ferramentas de apoio, riscos, gloss\u00e1rio e refer\u00eancias.</p> <p>Explore o menu lateral para navegar pelos t\u00f3picos!</p>"},{"location":"introducao/","title":"1. Introdu\u00e7\u00e3o","text":"<p>Este documento descreve a arquitetura do sistema AcadMap, abordando suas principais decis\u00f5es estruturais, vis\u00f5es, preocupa\u00e7\u00f5es dos stakeholders e justificativas t\u00e9cnicas. Ele est\u00e1 baseado nos princ\u00edpios b\u00e1sicos da ISO/IEC 42010, com foco em clareza, rastreabilidade e evolu\u00e7\u00e3o futura do sistema.</p>"},{"location":"introducao/#11-objetivo","title":"1.1 Objetivo","text":"<p>Apresentar a estrutura e organiza\u00e7\u00e3o da solu\u00e7\u00e3o, documentar decis\u00f5es arquiteturais e comunicar de forma clara entre todos os envolvidos.</p>"},{"location":"introducao/#12-escopo","title":"1.2 Escopo","text":"<p>Sistema web para permitir o armazenamento, consulta, classifica\u00e7\u00e3o e gera\u00e7\u00e3o de relat\u00f3rios sobre eventos e peri\u00f3dicos cient\u00edficos, com base em regras atualizadas da CAPES, substituindo a antiga consulta ao Qualis e eliminando a necessidade de verifica\u00e7\u00f5es manuais, com front-end React, back-end Spring Boot e banco de dados PostgreSQL.</p>"},{"location":"introducao/#13-definicoes","title":"1.3 Defini\u00e7\u00f5es","text":"<ul> <li>AcadMap: Nome do sistema representado nesta arquitetura. Plataforma para an\u00e1lise de produ\u00e7\u00e3o cient\u00edfica baseada em peri\u00f3dicos e eventos.</li> <li>MVP (Minimum Viable Product): Vers\u00e3o m\u00ednima funcional do sistema, com as funcionalidades essenciais para validar a proposta.</li> <li>API REST: Interface de comunica\u00e7\u00e3o baseada em HTTP com opera\u00e7\u00f5es sobre recursos, utilizando padr\u00f5es como GET, POST, PUT e DELETE.</li> <li>Stakeholder (ST): Pessoa, grupo ou organiza\u00e7\u00e3o com interesse direto ou indireto na defini\u00e7\u00e3o, uso ou evolu\u00e7\u00e3o do sistema. Referenciado por c\u00f3digos <code>STxx</code> (ex: ST01 \u2013 Desenvolvedor Backend).</li> <li>Preocupa\u00e7\u00e3o Arquitetural (P): Necessidade ou exig\u00eancia relevante de um ou mais stakeholders que deve ser considerada na arquitetura. Referenciada por <code>Pxx</code> (ex: P01 \u2013 Clareza de c\u00f3digo).</li> <li>Ponto de Vista (PV): Perspectiva sob a qual a arquitetura \u00e9 descrita, tratando um conjunto de preocupa\u00e7\u00f5es. Referenciado por <code>PVxx</code> (ex: PV01 \u2013 Vis\u00e3o L\u00f3gica).</li> <li>DAS: Documento de Arquitetura de Software.</li> <li>COMP-BACK-01, SEQU-MTRC-02, etc.: C\u00f3digos de identifica\u00e7\u00e3o dos diagramas utilizados ao longo do documento, seguindo o padr\u00e3o <code>[TIPO]-[OBJETO]-[N\u00daMERO]</code>.</li> <li>Controller / Service / Repository / Model: Camadas da arquitetura backend seguindo o padr\u00e3o MVC, respons\u00e1veis respectivamente por controlar requisi\u00e7\u00f5es, encapsular regras de neg\u00f3cio, acessar dados e representar entidades de dom\u00ednio.</li> <li>Pages / Components / Services (frontend): Diret\u00f3rios l\u00f3gicos do frontend React. <code>pages</code> cont\u00e9m telas principais, <code>components</code> agrupa componentes reutiliz\u00e1veis, e <code>services</code> abstrai chamadas \u00e0 API.</li> </ul>"},{"location":"pontos-de-vista/","title":"4. Pontos de Vista Arquiteturais","text":"<p>Pontos de vista arquiteturais s\u00e3o descri\u00e7\u00f5es espec\u00edficas de aspectos do sistema sob diferentes perspectivas, com o objetivo de abordar um subconjunto das preocupa\u00e7\u00f5es levantadas pelos stakeholders. Cada ponto de vista adota uma nota\u00e7\u00e3o e uma forma de representa\u00e7\u00e3o adequada \u00e0 natureza das informa\u00e7\u00f5es que transmite. A ado\u00e7\u00e3o de m\u00faltiplos pontos de vista facilita a comunica\u00e7\u00e3o entre as partes interessadas, permite avalia\u00e7\u00f5es segmentadas da arquitetura e aumenta a rastreabilidade das decis\u00f5es t\u00e9cnicas.</p> <p>A tabela a seguir descreve os pontos de vista adotados neste projeto, sua finalidade, artefatos utilizados e as principais preocupa\u00e7\u00f5es que cada um trata.</p> ID Ponto de Vista Objetivo Nota\u00e7\u00e3o / Artefato Utilizado Preocupa\u00e7\u00f5es Tratadas PV01 L\u00f3gico Modelar os m\u00f3dulos, componentes e suas responsabilidades Diagrama de Componentes (UML) P02, P05, P06, P07, P08, P10 PV02 Desenvolvimento Representar a organiza\u00e7\u00e3o do c\u00f3digo e boas pr\u00e1ticas adotadas Diagrama de pacotes (UML), \u00e1rvore de arquivos P01, P03, P04, P06, P09 PV03 Implanta\u00e7\u00e3o Modelar a infraestrutura de execu\u00e7\u00e3o e distribui\u00e7\u00e3o do sistema Diagrama de Deploy (UML) P05, P07, P10 PV04 Processo Representar intera\u00e7\u00f5es e fluxos de execu\u00e7\u00e3o Diagrama de Sequ\u00eancia (UML) P03, P04, P10 PV05 Uso Ilustrar a experi\u00eancia do usu\u00e1rio e seus fluxos de intera\u00e7\u00e3o Cen\u00e1rios, fluxos, prot\u00f3tipos (Figma) P02, P04, P08"},{"location":"preocupacoes/","title":"3. Preocupa\u00e7\u00f5es Arquiteturais","text":"<p>As preocupa\u00e7\u00f5es arquiteturais representam aspectos, requisitos e desafios cr\u00edticos que devem ser tratados durante o desenvolvimento do sistema. Elas s\u00e3o derivadas diretamente das necessidades dos stakeholders e impactam diretamente atributos de qualidade como seguran\u00e7a, manutenibilidade, desempenho, testabilidade e usabilidade. O mapeamento claro dessas preocupa\u00e7\u00f5es permite que a arquitetura seja constru\u00edda de forma rastre\u00e1vel, atendendo aos objetivos do projeto e assegurando a satisfa\u00e7\u00e3o dos stakeholders.</p> <p>A tabela a seguir apresenta as principais preocupa\u00e7\u00f5es levantadas, associadas aos stakeholders que as expressam e aos pontos de vista arquiteturais que as endere\u00e7am.</p> ID Preocupa\u00e7\u00e3o Stakeholders Relacionados Pontos de Vista Relacionados P01 Clareza e qualidade do c\u00f3digo ST01, ST02, ST05 VP02 (Desenvolvimento) P02 Experi\u00eancia do usu\u00e1rio (UX) ST02, ST03 VP01 (L\u00f3gico), VP05 (Uso) P03 Testabilidade e cobertura de testes ST04 VP02 (Desenvolvimento), VP04 (Processo) P04 Tempo de entrega e valor ao usu\u00e1rio final ST03 VP02 (Desenvolvimento), VP05 (Uso) P05 Alta disponibilidade e desempenho ST05 VP01 (L\u00f3gico), VP03 (Implanta\u00e7\u00e3o) P06 Evolutividade e manuten\u00e7\u00e3o futura ST01, ST04, ST05 VP01 (L\u00f3gico), VP02 (Desenvolvimento) P07 Integra\u00e7\u00e3o com sistemas externos ST01, ST05 VP01 (L\u00f3gico), VP03 (Implanta\u00e7\u00e3o) P08 Suporte a diferentes perfis de usu\u00e1rio ST03 VP05 (Uso), VP01 (L\u00f3gico) P09 Ado\u00e7\u00e3o de boas pr\u00e1ticas de engenharia ST01, ST02, ST04 VP02 (Desenvolvimento) P10 Seguran\u00e7a e privacidade de dados ST05 VP01 (L\u00f3gico), VP03 (Implanta\u00e7\u00e3o)"},{"location":"stakeholders/","title":"2. Stakeholders","text":"<p>Stakeholders s\u00e3o indiv\u00edduos, grupos ou entidades que possuem interesse direto ou indireto na defini\u00e7\u00e3o, evolu\u00e7\u00e3o ou opera\u00e7\u00e3o do sistema. Identificar claramente esses stakeholders \u00e9 fundamental para garantir que suas preocupa\u00e7\u00f5es sejam devidamente consideradas durante a elabora\u00e7\u00e3o da arquitetura. Isso contribui para a aloca\u00e7\u00e3o adequada de responsabilidades, melhora a comunica\u00e7\u00e3o entre as partes envolvidas e fortalece o alinhamento entre os objetivos de neg\u00f3cio e as decis\u00f5es t\u00e9cnicas.</p> <p>A tabela a seguir apresenta os stakeholders identificados para este projeto, descrevendo seus pap\u00e9is, responsabilidades e as preocupa\u00e7\u00f5es arquiteturais que representam.</p> ID Nome Papel Responsabilidades Principais Preocupa\u00e7\u00f5es Relacionadas ST01 Desenvolvedor Back Desenvolvimento do backend Implementar l\u00f3gica de neg\u00f3cio, integra\u00e7\u00f5es, persist\u00eancia P01, P06, P07, P09 ST02 Desenvolvedor Front Desenvolvimento do frontend Criar interfaces, garantir UX, consumir APIs P01, P02, P09 ST03 Product Owner Representante do neg\u00f3cio Definir backlog, validar valor para o usu\u00e1rio, priorizar entregas P02, P04, P08 ST04 Analista de QA Garantia da Qualidade Verificar cobertura de testes, detectar falhas, validar entregas P03, P06, P09 ST05 Arquiteto de Software Modelagem e implanta\u00e7\u00e3o t\u00e9cnica Projetar a arquitetura do sistema e do banco de dados, realizar implanta\u00e7\u00e3o em produ\u00e7\u00e3o P01, P05, P06, P07, P10"},{"location":"visoes/visao-desenvolvimento/","title":"5.2 Vis\u00e3o de Desenvolvimento","text":"<p>A Vis\u00e3o de Desenvolvimento descreve como o sistema AcadMap est\u00e1 estruturado em termos de diret\u00f3rios, pacotes e organiza\u00e7\u00e3o do c\u00f3digo-fonte. O sistema \u00e9 composto por dois grandes blocos tecnol\u00f3gicos:</p> <ul> <li>Backend monol\u00edtico com Java + Spring Boot</li> <li>Frontend com React + Vite</li> </ul> <p>Ambas as partes s\u00e3o integradas via API REST e armazenam dados em um banco PostgreSQL, conforme representado na Vis\u00e3o L\u00f3gica.</p>"},{"location":"visoes/visao-desenvolvimento/#521-estrutura-de-repositorios","title":"5.2.1 Estrutura de Reposit\u00f3rios","text":"<p>O c\u00f3digo e a documenta\u00e7\u00e3o do sistema est\u00e3o hospedados no GitHub:</p> <ol> <li> <p>Reposit\u00f3rio de Desenvolvimento</p> </li> <li> <p>Reposit\u00f3rio de Documenta\u00e7\u00e3o</p> </li> </ol> <p>Todos os reposit\u00f3rios seguem boas pr\u00e1ticas de versionamento (<code>main</code>, <code>develop</code>), commits sem\u00e2nticos (conventional commits), e segue o Git Trunk Flow, com CI/CD configurado via GitHub Actions.</p> <p>Cada reposit\u00f3rio possui:</p> <ul> <li>Arquivo <code>README.md</code> com instru\u00e7\u00f5es de uso e contribui\u00e7\u00e3o</li> <li>Padr\u00e3o de branches (<code>feature/*</code>, <code>fix/*</code>, <code>hotfix/*</code>)</li> <li>Pull Requests com revis\u00e3o obrigat\u00f3ria</li> </ul>"},{"location":"visoes/visao-desenvolvimento/#modelo-de-estrutura-de-arquivos","title":"Modelo de Estrutura de Arquivos","text":"<pre><code>\ud83d\udcc1 .\n\u251c\u2500\u2500 \ud83d\udcc1 backend\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 Dockerfile\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 src\n\u2502   \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main\n\u2502   \u2502       \u251c\u2500\u2500 \ud83d\udcc1 java\n\u2502   \u2502       \u2502   \u2514\u2500\u2500 \ud83d\udcc1 com\n\u2502   \u2502       \u2502       \u2514\u2500\u2500 \ud83d\udcc1 acadmap\n\u2502   \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc1 controller\n\u2502   \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc1 model\n\u2502   \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc1 repository\n\u2502   \u2502       \u2502           \u2514\u2500\u2500 \ud83d\udcc1 service\n\u2502   \u2502       \u2514\u2500\u2500 \ud83d\udcc1 resources\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 tomcat\n\u251c\u2500\u2500 \ud83d\udcc1 db\n\u251c\u2500\u2500 \ud83d\udcc4 docker-compose.yml\n\u251c\u2500\u2500 \ud83d\udcc4 .env\n\u251c\u2500\u2500 \ud83d\udcc1 frontend\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 Dockerfile\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 public\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 src\n\u2502       \u251c\u2500\u2500 \ud83d\udcc1 components\n\u2502       \u251c\u2500\u2500 \ud83d\udcc1 pages\n\u2502       \u2514\u2500\u2500 \ud83d\udcc1 services\n\u251c\u2500\u2500 \ud83d\udcc1 .github\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 workflows\n\u2502       \u2514\u2500\u2500 \ud83d\udcc4 ci.yml\n\u2514\u2500\u2500 \ud83d\udcc4 README.md\n</code></pre>"},{"location":"visoes/visao-desenvolvimento/#522-pipeline-de-cicd-resumo","title":"5.2.2 Pipeline de CI/CD (RESUMO)","text":""},{"location":"visoes/visao-desenvolvimento/#523-gerencia-de-desenvolvimento-e-tarefas","title":"5.2.3 Ger\u00eancia de Desenvolvimento e Tarefas","text":"<p>O projeto utiliza o recurso GitHub Projects para organiza\u00e7\u00e3o e acompanhamento das atividades de desenvolvimento, com os seguintes objetivos:</p> <ul> <li>Planejamento de entregas por sprint ou fase</li> <li>Prioriza\u00e7\u00e3o de funcionalidades e corre\u00e7\u00f5es</li> <li>Acompanhamento do progresso por coluna (Kanban)</li> <li>Integra\u00e7\u00e3o direta com Pull Requests e Issues</li> </ul> <p>Acesso o quadro aqui</p> <pre><code>gitGraph\n   commit\n   commit\n   branch develop\n   checkout develop\n   commit\n   commit\n   checkout main\n   merge develop\n   commit\n   commit</code></pre>"},{"location":"visoes/visao-implantacao/","title":"Vis\u00e3o de Implanta\u00e7\u00e3o","text":"<p>A Vis\u00e3o de Implanta\u00e7\u00e3o descreve como o sistema AcadMap \u00e9 fisicamente distribu\u00eddo no ambiente de execu\u00e7\u00e3o, com foco na infraestrutura de cont\u00eaineres Docker. Essa vis\u00e3o \u00e9 fundamental para compreender o ambiente operacional do sistema, incluindo a aloca\u00e7\u00e3o de componentes, fluxos de comunica\u00e7\u00e3o, protocolos utilizados e fronteiras de seguran\u00e7a.</p> <p>O diagrama a seguir apresenta uma vis\u00e3o de alto n\u00edvel da implanta\u00e7\u00e3o do sistema em um cen\u00e1rio t\u00edpico de produ\u00e7\u00e3o, com os seguintes elementos principais:</p> <ul> <li>Usu\u00e1rio final, que acessa o sistema por meio de um navegador web;</li> <li>Fronteira de rede, que separa o ambiente da internet p\u00fablica da rede interna de containers;</li> <li>Container Apache HTTP Server, respons\u00e1vel por servir os arquivos est\u00e1ticos do frontend (React + Vite);</li> <li>Container Backend (Spring Boot), que implementa a l\u00f3gica de neg\u00f3cio e exp\u00f5e as APIs REST em JSON;</li> <li>Container Banco de Dados (PostgreSQL), que armazena persistentemente os dados da aplica\u00e7\u00e3o;</li> <li>Toda a comunica\u00e7\u00e3o entre os containers ocorre dentro de uma rede Docker interna (bridge), utilizando protocolos padronizados como HTTPS, HTTP e JDBC.</li> </ul> <p>Esse modelo garante isolamento entre servi\u00e7os, facilita o escalonamento e simplifica o processo de implanta\u00e7\u00e3o e manuten\u00e7\u00e3o por meio de orquestra\u00e7\u00e3o baseada em cont\u00eaineres.</p>"},{"location":"visoes/visao-implantacao/#diagrama-de-implantacao-dep-01","title":"Diagrama de Implanta\u00e7\u00e3o - DEP-01","text":"<pre><code>graph TD\n    user[\"Usu\u00e1rio (Navegador Web)\"]\n\n    %% Rede Docker Interna\n    subgraph \"acadmap-net (intranet)\"\n\n        subgraph \"Container do Frontend\"\n            apache[\"Apache\"]\n\n            frontend[\"Aplica\u00e7\u00e3o React (Vite)\"]\n        end\n\n        subgraph \"Container do Backend\"\n            backend[\"Aplica\u00e7\u00e3o Spring Boot\"]\n            api[\"API REST (Java)\"]\n        end\n\n        subgraph \"Container do Banco de Dados\"\n            db[\"PostgreSQL\"]\n        end\n\n    end\n\n    %% Conex\u00f5es\n    user --&gt;|internet - https| apache\n    apache --&gt;|HTTP - porta 8080| backend\n    backend --&gt; api\n    backend --&gt;|JDBC - porta 5432| db</code></pre> <p>Clique nos blocos abaixo para visualizar vers\u00f5es em outros formatos:</p> Vers\u00e3o PlantUML <pre><code>    @startuml\n    title DEP-01 \u2013 Diagrama de Implanta\u00e7\u00e3o do Sistema AcadMap   \n    actor user as \"Usu\u00e1rio\"\n    node browser as \"Navegador Web\"     \n    ' Fronteira entre internet p\u00fablica e rede interna Docker\n    boundary \"Fronteira de Rede\\n(P\u00fablica &gt; Interna)\" as internet   \n    ' Rede interna - Docker\n    node \"Rede Docker Interna (acadmap-net)\" as docker_net {    \n    node \"Container Apache HTTP Server\" as apache {\n    port p_https\n    artifact \"Frontend (JS + React)\" as front\n    }   \n    node \"Container Backend Spring Boot\" as backend {\n    artifact \"API REST (Java)\" as api\n    }   \n    node \"Container Banco de Dados\" as db_container {\n    database \"PostgreSQL\" as db\n    }\n    }   \n    ' Liga\u00e7\u00f5es com a fronteira (com indica\u00e7\u00e3o clara do ponto de transi\u00e7\u00e3o)\n    user --&gt; browser\n    browser --&gt; internet : HTTPS\n    internet --&gt; p_https    \n    ' Conex\u00f5es internas da rede Docker\n    apache --&gt; backend : HTTP (porta 8080)\n    backend --&gt; db : JDBC (porta 5432)\n    @enduml\n</code></pre> Vers\u00e3o .png <p></p> <p>O diagrama IMPL-01 mostra que o usu\u00e1rio interage com o sistema AcadMap por meio de um navegador, acessando o frontend hospedado em um servidor Apache via HTTPS. Esse frontend comunica-se com a API REST do backend via HTTP, que por sua vez realiza opera\u00e7\u00f5es no banco de dados PostgreSQL utilizando JPA via JDBC.</p> <p>A separa\u00e7\u00e3o entre a Internet e a infraestrutura interna do sistema evidencia uma preocupa\u00e7\u00e3o com seguran\u00e7a e organiza\u00e7\u00e3o da rede. O servidor de aplica\u00e7\u00e3o e o banco de dados s\u00e3o acess\u00edveis apenas internamente, enquanto a interface p\u00fablica \u00e9 controlada pelo servidor web.</p>"},{"location":"visoes/visao-logica/","title":"5.1 Vis\u00e3o L\u00f3gica","text":"<p>A Vis\u00e3o L\u00f3gica descreve a estrutura interna do sistema AcadMap, detalhando os principais pacotes, camadas e depend\u00eancias entre os componentes de software. Esta vis\u00e3o est\u00e1 organizada em tr\u00eas blocos tecnol\u00f3gicos fundamentais: o frontend, desenvolvido com React e empacotado via Vite; o backend, implementado em Java utilizando o framework Spring Boot sob o padr\u00e3o MVC (Model-View-Controller); e o banco de dados, estruturado em PostgreSQL.</p> <p>Cada camada foi desenhada com foco em boas pr\u00e1ticas de engenharia de software, promovendo a separa\u00e7\u00e3o clara de responsabilidades, a reutiliza\u00e7\u00e3o de c\u00f3digo, a legibilidade e a facilidade de manuten\u00e7\u00e3o. </p> <p>Os diagramas a seguir ilustram essas estruturas e seus relacionamentos internos e externos, permitindo uma visualiza\u00e7\u00e3o clara da organiza\u00e7\u00e3o l\u00f3gica do sistema.</p>"},{"location":"visoes/visao-logica/#511-visao-geral-do-sistema","title":"5.1.1 Vis\u00e3o Geral do Sistema","text":"<p>O acesso ao sistema se inicia no navegador do usu\u00e1rio, que interage com o frontend da aplica\u00e7\u00e3o via protocolo HTTPS. Esse frontend \u00e9 uma aplica\u00e7\u00e3o desenvolvida em React e hospedada em um servidor web Apache, o qual est\u00e1 exposto \u00e0 Internet. A camada de frontend \u00e9 respons\u00e1vel por renderizar a interface do usu\u00e1rio e encaminhar as requisi\u00e7\u00f5es para o backend.</p> <p>As requisi\u00e7\u00f5es de dados feitas pelo frontend s\u00e3o encaminhadas ao backend, uma aplica\u00e7\u00e3o Java Spring Boot, que atua como servidor de aplica\u00e7\u00e3o. A comunica\u00e7\u00e3o entre o frontend e o backend se d\u00e1 via HTTP interno, utilizando uma API REST baseada em JSON.</p> <p>O backend, por sua vez, realiza opera\u00e7\u00f5es de leitura e escrita em um banco de dados PostgreSQL, hospedado em um servidor dedicado de banco de dados. Essa comunica\u00e7\u00e3o utiliza a especifica\u00e7\u00e3o JPA (Java Persistence API), implementada com o JDBC, por meio da porta padr\u00e3o 5432.</p>"},{"location":"visoes/visao-logica/#diagrama-de-componentes-de-alto-nivel-comp-geral-01","title":"Diagrama de Componentes de Alto N\u00edvel - COMP-GERAL-01","text":"<pre><code>graph TD\n\n  subgraph \"Sistema AcadMap\"\n\n    subgraph \"Frontend\"\n      FPages[Pages]\n      FComponents[Components]\n      FServices[FrontendServices]\n    end\n\n    subgraph \"Backend\"\n      BController[Controllers]\n      BService[BackendServices]\n      BRepository[Repository]\n      BModel[Models]\n    end\n\n    DB[(PostgreSQL)]\n\n    FPages --&gt; FComponents\n    FPages --&gt; FServices\n    FServices --&gt; BController\n    BController --&gt; BService\n    BService --&gt; BRepository\n    BService --&gt; BModel\n    BRepository --&gt; DB\n\n  end</code></pre> <p>Clique nos blocos abaixo para visualizar vers\u00f5es em outros formatos:</p> Vers\u00e3o PlantUML <pre><code>@startuml\ntitle COMP-GERAL-01 \u2013 Diagrama de Componentes do Sistema AcadMap (Vis\u00e3o de Alto N\u00edvel)\n\n' Container principal\nnode \"Sistema AcadMap\" {\n\n  package \"Frontend - GUI\\n(React + Vite)\" {\n    [Pages &lt;&lt;component&gt;&gt;] as FPages\n    [Components &lt;&lt;component&gt;&gt;] as FComponents\n    [Services &lt;&lt;component&gt;&gt;] as FServices\n  }\n\n  package \"Backend - L\u00f3gica de Neg\u00f3cio\\n(Spring Boot)\" {\n    [Controllers &lt;&lt;component&gt;&gt;] as BController\n    [Services &lt;&lt;component&gt;&gt;] as BService\n    [Repository &lt;&lt;component&gt;&gt;] as BRepository\n    [Models &lt;&lt;component&gt;&gt;] as BModel\n  }\n\n  database \"PostgreSQL\" as DB\n\n\n  ' Intera\u00e7\u00f5es internas - frontend\n  FPages --&gt; FComponents : Renderiza UI\n  FPages --&gt; FServices : Invoca servi\u00e7os REST\n\n  ' Comunica\u00e7\u00e3o frontend \u2192 backend (API REST)\n  FServices --&gt; BController : Requisi\u00e7\u00f5es HTTP (JSON)\n\n  ' Backend interno\n  BController --&gt; BService : Chamada de l\u00f3gica de neg\u00f3cio\n  BService --&gt; BRepository : Consulta/Manipula dados\n  BService --&gt; BModel : Acesso ao modelo de dom\u00ednio\n  BRepository --&gt; DB : Opera\u00e7\u00f5es CRUD\n}\n@enduml\n</code></pre> Vers\u00e3o .png <p></p>"},{"location":"visoes/visao-logica/#512-backend-spring-boot-mvc","title":"5.1.2 Backend (Spring Boot - MVC)","text":"<p>A camada backend adota uma arquitetura monol\u00edtica com padr\u00e3o MVC (Model-View-Controller), sem modulariza\u00e7\u00e3o por dom\u00ednio. O c\u00f3digo \u00e9 organizado em pacotes que refletem as camadas de controle (Controller), servi\u00e7o (Service), persist\u00eancia (Repository) e modelo de dom\u00ednio (Model).</p> <p>Essa organiza\u00e7\u00e3o visa garantir clareza e manuten\u00e7\u00e3o simples, permitindo o crescimento gradual do sistema. Cada entidade do dom\u00ednio \u00e9 representada por um modelo, e manipulada por seus respectivos controladores, servi\u00e7os e reposit\u00f3rios.</p>"},{"location":"visoes/visao-logica/#diagrama-de-componentes-do-backend-comp-back-01","title":"Diagrama de Componentes do Backend - COMP-BACK-01","text":"<p>Nota</p> <p>Diagrama desenvolvido antes do recebimento dos insumos necess\u00e1rios para uma vers\u00e3o concreta</p> <pre><code>graph TD\n  subgraph controller\n    A[AutorController]\n    B[ArtigoController]\n    C[MetricaController]\n  end\n\n  subgraph service\n    D[AutorService]\n    E[ArtigoService]\n    F[MetricaService]\n  end\n\n  subgraph repository\n    G[AutorRepository]\n    H[ArtigoRepository]\n    I[MetricaRepository]\n  end\n\n  subgraph model\n    J[Autor]\n    K[Artigo]\n    L[Metrica]\n  end\n\n  A --&gt; D\n  B --&gt; E\n  C --&gt; F\n\n  D --&gt; G\n  D --&gt; J\n  E --&gt; H\n  E --&gt; K\n  F --&gt; I\n  F --&gt; L\n\n  A --&gt; J\n  B --&gt; K\n  C --&gt; L\n\n  G --&gt; J\n  H --&gt; K\n  I --&gt; L</code></pre> <p>Clique nos blocos abaixo para visualizar vers\u00f5es em outros formatos:</p> Vers\u00e3o PlantUML <pre><code>@startuml\ntitle Diagrama de Componentes - Backend AcadMap (Spring Boot - MVC) - COMP-BACK-01\n\npackage \"Controller\" {\n  [AutorController &lt;&lt;component&gt;&gt;] as AC\n  [ArtigoController &lt;&lt;component&gt;&gt;] as ARC\n  [MetricaController &lt;&lt;component&gt;&gt;] as MC\n}\n\npackage \"Service\" {\n  [AutorService &lt;&lt;component&gt;&gt;] as AS\n  [ArtigoService &lt;&lt;component&gt;&gt;] as ARS\n  [MetricaService &lt;&lt;component&gt;&gt;] as MS\n}\n\npackage \"Repository\" {\n  [AutorRepository &lt;&lt;component&gt;&gt;] as AR\n  [ArtigoRepository &lt;&lt;component&gt;&gt;] as ARR\n  [MetricaRepository &lt;&lt;component&gt;&gt;] as MR\n}\n\npackage \"Model\" {\n  [Autor &lt;&lt;entity&gt;&gt;] as A\n  [Artigo &lt;&lt;entity&gt;&gt;] as ART\n  [Metrica &lt;&lt;entity&gt;&gt;] as M\n}\n\nAC --&gt; AS\nARC --&gt; ARS\nMC --&gt; MS\n\nAS --&gt; AR\nAS --&gt; A\nARS --&gt; ARR\nARS --&gt; ART\nMS --&gt; MR\nMS --&gt; M\n\nAC --&gt; A\nARC --&gt; ART\nMC --&gt; M\n\nAR --&gt; A\nARR --&gt; ART\nMR --&gt; M\n@enduml\n</code></pre> Vers\u00e3o .png <p></p>"},{"location":"visoes/visao-logica/#513-frontend-react-vite","title":"5.1.3 Frontend (React + Vite)","text":"<p>A camada frontend \u00e9 implementada com React e Vite, utilizando o paradigma de componentiza\u00e7\u00e3o funcional. A aplica\u00e7\u00e3o \u00e9 organizada em tr\u00eas principais diret\u00f3rios l\u00f3gicos:</p> <ul> <li><code>pages/</code>: Define as p\u00e1ginas da aplica\u00e7\u00e3o vinculadas \u00e0s rotas principais.</li> <li><code>components/</code>: Cont\u00e9m componentes reutiliz\u00e1veis que comp\u00f5em visualmente as p\u00e1ginas.</li> <li><code>services/</code>: Abstrai a comunica\u00e7\u00e3o com a API REST do backend, utilizando axios ou fetch.</li> </ul> <p>Essa organiza\u00e7\u00e3o permite alta reutiliza\u00e7\u00e3o, facilidade de testes e separa\u00e7\u00e3o de responsabilidades. O fluxo de dados se baseia em props e hooks do React.</p>"},{"location":"visoes/visao-logica/#diagrama-de-componentes-do-frontend-comp-front-01","title":"Diagrama de Componentes do Frontend - COMP-FRONT-01","text":"<p>Nota</p> <p>Diagrama desenvolvido antes do recebimento dos insumos necess\u00e1rios para uma vers\u00e3o concreta</p> <pre><code>graph TD\n  subgraph pages\n    A[DashboardPage]\n    B[RelatoriosPage]\n    C[AutoresPage]\n  end\n\n  subgraph components\n    D[CardIndicador]\n    E[TabelaArtigos]\n    F[FormAutor]\n  end\n\n  subgraph services\n    G[api.js]\n    H[artigoService.js]\n    I[autorService.js]\n  end\n\n  A --&gt; D\n  B --&gt; E\n  C --&gt; F\n\n  A --&gt; G\n  B --&gt; H\n  C --&gt; I\n\n  E --&gt; H\n  F --&gt; I</code></pre> <p>Clique nos blocos abaixo para visualizar vers\u00f5es em outros formatos:</p> Vers\u00e3o PlantUML <pre><code>  @startuml\n  title COMP-FRONT-01 \u2013 Diagrama de Componentes do Frontend (React + Vite)\n\n  package \"Pages\" {\n    [DashboardPage &lt;&lt;component&gt;&gt;] as DP\n    [RelatoriosPage &lt;&lt;component&gt;&gt;] as RP\n    [AutoresPage &lt;&lt;component&gt;&gt;] as AP\n  }\n\n  package \"Components\" {\n    [CardIndicador &lt;&lt;component&gt;&gt;] as CI\n    [TabelaArtigos &lt;&lt;component&gt;&gt;] as TA\n    [FormAutor &lt;&lt;component&gt;&gt;] as FA\n  }\n\n  package \"Services\" {\n    [api.js &lt;&lt;component&gt;&gt;] as API\n    [artigoService.js &lt;&lt;component&gt;&gt;] as ARTAPI\n    [autorService.js &lt;&lt;component&gt;&gt;] as AUTAPI\n  }\n\n  ' P\u00e1ginas usam componentes\n  DP --&gt; CI\n  RP --&gt; TA\n  AP --&gt; FA\n\n  ' P\u00e1ginas consomem servi\u00e7os\n  DP --&gt; API\n  RP --&gt; ARTAPI\n  AP --&gt; AUTAPI\n\n  ' Componentes tamb\u00e9m podem consumir servi\u00e7os\n  TA --&gt; ARTAPI\n  FA --&gt; AUTAPI\n\n  @enduml\n</code></pre> Vers\u00e3o .png <p></p>"}]}